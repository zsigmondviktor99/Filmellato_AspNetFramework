@model IEnumerable<Filmellato.Models.Customer>
@*
    Because we get a list from the controller

    Note: I've set the model for this view to IEnumerable<Customer>.
    This is a simple interface implemented by the list class. Since
    in this view we only want to iterate over this list, and we don't
    need any of the operations in the List class (eg Add, Remove, etc),
    it's better to use the IEnumerable interface, which allows use to
    iterate over the list. If in the future, we replace the List with a
    different data structure, as long as it is enumerable, our view code
    will remain unchanged.
*@

@{
    ViewBag.Title = "Customers";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Customers</h2>

<a href="/customers/new" class="btn btn-primary">New Customer</a>
<br />
<br />

@*if (!Model.Any())
{
    We can use DataTable plugin to render a message like this if the Array of Customers is empty from the API
    <p>We don't have any customers yet.</p>
}
else
{
    Old place of tghe table
}*@

@*Placeholder for the DataTable*@
<table id="customers" class="table table-bordered table-hover">
    <thead>
        <tr>
            <th>Customer</th>
            <th>Membership Type</th>
            <th>Delete</th>
        </tr>
    </thead>
    <tbody>
        @*RENDERING ON THE SERVER >> NO, we are rendering from our API in <script>...</script>
            @foreach (var customer in Model)
            {
                <tr>
                                                       Details
                    <td>@Html.ActionLink(customer.Name, "Edit", "Customers", new { id = customer.Id }, null)</td>
                    <td>@customer.MembershipType.MembershipName</td>
                    <td>
                        <button data-customer-id="@customer.Id" class="btn-link js-delete">Delete</button>
                    </td>
                </tr>
            }*@
    </tbody>
</table>

@section scripts
{
    <script>
        //When the DOM is fully loaded
        $(document).ready(function () {
            //VIEW
            //Referenece to our customers <table> and call DataTable function
            //The simpliest way to use DataTable Plug-in
            var table = $("#customers").DataTable({
                //Configuration object >> to make Customers API the source of data
                ajax: {
                    url: "/api/customers",

                    /*The response we get from our API is an array of objects >>
                    the array itself is the actual source of data, and our DataTable
                    does not need to go an other object to get it >> dataSrc is an
                    empty string*/
                    dataSrc: ""
                },
                //Columns >> our datas come in JSON from our API in an Array 
                columns: [
                    //Every column is an object
                    {
                        /*data >> Tell DataTable plug-in where to get data for this column

                        With this configuration DataTable will look at this property
                        (name) of the Customer object and use that as plain text
                        to render each row*/
                        data: "name",

                        //To make name a link
                        //data >> value of name property from Customer object
                        //type >> (addittional)
                        //customer >> (addittional) actual object (row) we rendering
                        render: function (data /*data parameter >> name*/, type, customer) {
                            return "<a href='/customers/edit/" + customer.id + "'>" + data + "</a>";
                        }
                    },
                    {
                        /*Customer DTO does not have MembershipType >>
                        create MembershipTypeDto and CustomerDto can use it >>
                        MembershipTypeDto only has Id and MembershipName, we don not need more*/
                        data: "membershipType.membershipName"
                    },
                    {
                        data: "id",
                        render: function (data /*data paramater >> id*/) {
                            return "<button class='btn-link js-delete' data-customer-id=" + data + ">Delete</button>";
                        }
                    }
                ]
            });


            //DATA ACCESS
            //customers table (#id) >> all elements with class js-delete
            //.on("click", ...) >> click event
            $("#customers").on("click", ".js-delete", function () {
                var button = $(this);
                //We call our API here

                //If user clicks Ok
                bootbox.confirm("Are you sure you want to delete this customer?", function (result) {
                    if (result) {
                        $.ajax({
                            url: "/api/customers/" + button.attr("data-customer-id"),
                            method: "DELETE",
                            success: function () {
                                //We delete our customer here (DB and DOM to <tr> (complete row))
                                table.row(button.parents("tr")).remove().draw();
                            }
                        });
                    }
                });

                /*if (confirm("Are you sure you want to delete this customer?")) {
                    $.ajax({
                        url: "/api/customers/" + button.attr("data-customer-id"),
                        method: "DELETE",
                        success: function () {
                            //We delete our customer here (DB and DOM to <tr> (complete row))
                            button.parents("tr").remove();
                        }
                    })
                }*/
            });
        });
    </script>
}

