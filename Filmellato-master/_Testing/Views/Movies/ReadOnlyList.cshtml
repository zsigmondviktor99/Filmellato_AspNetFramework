@model IEnumerable<Filmellato.Models.Movie>
@{
    ViewBag.Title = "Movies";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h2>Movies</h2>
<br /><br />

<table id="movies" class="table table-bordered table-hover">
    <thead>
        <tr>
            <th>Movie</th>
            <th>Genre</th>
            <th>Number Available</th>
        </tr>
    </thead>
    <tbody>
        @*@foreach (var movie in Model)
        {
        <tr>
                                             Details
            <td>@Html.ActionLink(@movie.Name, "Edit", "Movies", new { id = movie.Id }, null)</td>
            <td>@movie.Genre.GenreName</td>
        </tr>
        }*@
    </tbody>
</table>

@section scripts
{
    <script>
        //When the DOM is fully loaded
        $(document).ready(function () {
            //VIEW
            //Referenece to our movies <table> and call DataTable function
            //The simpliest way to use DataTable Plug-in
            var table = $("#movies").DataTable({
                //Configuration object >> to make Movies API the source of data
                ajax: {
                    url: "/api/movies",

                    /*The response we get from our API is an array of objects >>
                    the array itself is the actual source of data, and our DataTable
                    does not need to go an other object to get it >> dataSrc is an
                    empty string*/
                    dataSrc: ""
                },
                //Columns >> our datas come in JSON from our API in an Array
                columns: [
                    //Every column is an object
                    {
                        /*data >> Tell DataTable plug-in where to get data for this column

                        With this configuration DataTable will look at this property
                        (name) of the Movie object and use that as plain text
                        to render each row*/
                        data: "name"
                    },
                    {
                        /*Movie DTO does not have Genre >>
                        create GenreDto and MovieDto can use it >>
                        GenreDto only has Id and GenreName, we don not need more*/
                        data: "genre.genreName"
                    },
                    {
                        data: "numberAvailable"
                    }
                ]
            });
        });
    </script>
}